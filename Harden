#!/usr/bin/env bash
# harden-oracle9-splunk-ccdc-openweb-9997.sh
# Splunk-only hardening with NO IP blocking:
#   - SplunkWeb 8000 open to all
#   - splunkd mgmt (8089) bound to 127.0.0.1
#   - Receiver enabled on 9997
# Adds AIDE + monitor with syslog alerts.
# Run as root.

set -euo pipefail
IFS=$'\n\t'

# ---------------------- EDIT THESE ----------------------
SPLUNK_HOME="/opt/splunk"
SPLUNK_USER="splunk"
SPLUNK_GROUP="splunk"
SPLUNK_WEB_PORT=8000
SPLUNK_MGMT_PORT=8089      # loopback only
SPLUNK_RECEIVE_PORT=9997   # Universal Forwarder receiver
# -------------------------------------------------------

TS="$(date +%Y%m%d_%H%M%S)"
BACKUP_DIR="/root/ccdc_backups_${TS}"
mkdir -p "$BACKUP_DIR"

bkp(){ [ -f "$1" ] && cp -p "$1" "${BACKUP_DIR}/$(basename "$1").${TS}" || true; }
say(){ echo -e "[+] $*"; }
warn(){ echo -e "[-] $*" >&2; }

[ "$(id -u)" -eq 0 ] || { echo "ERROR: run as root"; exit 2; }

say "Backups -> $BACKUP_DIR"
for f in \
  /etc/selinux/config \
  /etc/ssh/sshd_config \
  /etc/security/limits.conf \
  /etc/login.defs \
  /etc/audit/rules.d/ccdc.rules \
  "${SPLUNK_HOME}/etc/system/local/server.conf" \
  "${SPLUNK_HOME}/etc/system/local/web.conf" \
  "${SPLUNK_HOME}/etc/system/local/inputs.conf"
do bkp "$f"; done

# -------------------- SELinux --------------------
say "Enforcing SELinux"
sed -i 's/^SELINUX=.*/SELINUX=enforcing/' /etc/selinux/config || true
command -v setenforce >/dev/null 2>&1 && setenforce 1 || true
dnf -y install policycoreutils-python-utils setools-console >/dev/null 2>&1 || true

# -------------------- Disable SSH --------------------
say "Disabling SSH service to reduce attack surface"
systemctl disable --now sshd 2>/dev/null || true
systemctl mask sshd 2>/dev/null || true

# -------------------- Splunk config --------------------
if [ -d "${SPLUNK_HOME}" ]; then
  say "Configuring Splunk (mgmt -> 127.0.0.1:${SPLUNK_MGMT_PORT}, Web -> 0.0.0.0:${SPLUNK_WEB_PORT}, Receiver -> ${SPLUNK_RECEIVE_PORT})"
  mkdir -p "${SPLUNK_HOME}/etc/system/local"

  # splunkd: bind mgmt to loopback + TLS defaults
  cat > "${SPLUNK_HOME}/etc/system/local/server.conf" <<'EOF'
[sslConfig]
enableSplunkdSSL = true
sslVersions = tls1.2, tls1.3
cipherSuite = TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256
allowSslCompression = false

[general]
mgmtHostPort = 127.0.0.1:8089
EOF

  # SplunkWeb on 8000 (HTTPS)
  cat > "${SPLUNK_HOME}/etc/system/local/web.conf" <<EOF
[settings]
enableSplunkWebSSL = true
httpport = ${SPLUNK_WEB_PORT}
EOF

  # Enable receiver on 9997 via inputs.conf (auth-free method)
  cat > "${SPLUNK_HOME}/etc/system/local/inputs.conf" <<EOF
[splunktcp://${SPLUNK_RECEIVE_PORT}]
disabled = 0
EOF

  # Ensure ownership and labels
  chown -R "${SPLUNK_USER}:${SPLUNK_GROUP}" "${SPLUNK_HOME}" || true
  restorecon -Rv "${SPLUNK_HOME}" 2>/dev/null || true

  # Free 8000 if some other proc grabbed it (keep Splunk on 8000)
  if ss -ltnp | grep -q ":${SPLUNK_WEB_PORT}"; then
    say "Port ${SPLUNK_WEB_PORT} is in use; freeing it"
    ss -ltnp | awk -v P=":${SPLUNK_WEB_PORT}" '$4 ~ P {print $7}' | sed 's/.*pid=\([0-9]\+\).*/\1/' | xargs -r kill -9 || true
    sleep 1
  fi

  # Clean stale PIDs
  rm -f "${SPLUNK_HOME}/var/run/splunk/"*.pid 2>/dev/null || true

  # Create systemd unit if missing; start as splunk
  if ! systemctl list-unit-files | grep -q '^splunk\.service'; then
    "${SPLUNK_HOME}/bin/splunk" enable boot-start -user "${SPLUNK_USER}" \
      --accept-license --answer-yes --no-prompt >/dev/null 2>&1 || true
  fi


# -------------------- Firewalld: open 8000 & 9997 to all --------------------
if command -v firewall-cmd >/dev/null 2>&1; then
  say "Opening ${SPLUNK_WEB_PORT}/tcp (web) and ${SPLUNK_RECEIVE_PORT}/tcp (receiver) with no IP restrictions"
  systemctl enable --now firewalld >/dev/null 2>&1 || true
  ACTIVE_ZONE="$(firewall-cmd --get-default-zone 2>/dev/null || echo public)"
  firewall-cmd --permanent --zone="${ACTIVE_ZONE}" --add-port=${SPLUNK_WEB_PORT}/tcp >/dev/null 2>&1 || true
  firewall-cmd --permanent --zone="${ACTIVE_ZONE}" --add-port=${SPLUNK_RECEIVE_PORT}/tcp >/dev/null 2>&1 || true
  firewall-cmd --reload >/dev/null 2>&1 || true
  say "firewalld (${ACTIVE_ZONE}) summary:"
  firewall-cmd --zone="${ACTIVE_ZONE}" --list-all || true
else
  warn "firewall-cmd missing; skipping firewall changes (assume external FW)"
fi

# -------------------- Audit rules (persistent) --------------------
say "Installing persistent audit rules"
mkdir -p /etc/audit/rules.d
cat > /etc/audit/rules.d/ccdc.rules <<EOF
# Splunk configs
-w ${SPLUNK_HOME}/etc/system/local/ -p wa -k splunk_config_changes
-w ${SPLUNK_HOME}/etc/apps/ -p wa -k splunk_app_changes
# Identity & auth
-w /etc/passwd -p wa -k user_changes
-w /etc/group  -p wa -k group_changes
-w /etc/shadow -p wa -k shadow_changes
-w /etc/sudoers -p wa -k sudoers_changes
# Command logging
-a exit,always -F arch=b64 -S execve -k command_log
-w /usr/bin/sudo -p x -k sudo_log
-w /bin/su -p x -k su_log
EOF
augenrules --load >/dev/null 2>&1 || true
systemctl enable --now auditd >/dev/null 2>&1 || true

# -------------------- AIDE + syslog alerts --------------------
say "Setting up AIDE (baseline if missing) and integrity alerting"
dnf -y install aide >/dev/null 2>&1 || true
if ! [ -f /var/lib/aide/aide.db.gz ]; then
  aide --init >/dev/null 2>&1 || true
  [ -f /var/lib/aide/aide.db.new.gz ] && mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz
fi
install -d -m 0750 /var/log/aide

tee /usr/local/bin/check_integrity >/dev/null <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
ts="$(date +%Y%m%d_%H%M%S)"
LOG_DIR="/var/log/aide"
mkdir -p "$LOG_DIR"

OUT="${LOG_DIR}/aide_check_${ts}.log"
SUMMARY="${LOG_DIR}/aide_summary_${ts}.txt"

set +e
aide --check | tee "$OUT"
rc=$?
set -e

grep -E '^(Added files:|Removed files:|Changed files:)' "$OUT" > "$SUMMARY" || true

if [[ $rc -ne 0 ]]; then
  logger -p authpriv.alert -t AIDE "INTEGRITY ALERT: differences detected; see $OUT and $SUMMARY"
else
  logger -p authpriv.info -t AIDE "Integrity OK (no differences)."
fi
exit $rc
EOF
chmod +x /usr/local/bin/check_integrity

say "Scheduling AIDE every 15 minutes"
/bin/cat > /etc/cron.d/aide-check <<'EOF'
*/15 * * * * root /usr/local/bin/check_integrity
EOF
chmod 0644 /etc/cron.d/aide-check

# -------------------- Splunk ulimits --------------------
say "Setting Splunk ulimits"
mkdir -p /etc/security/limits.d
cat > /etc/security/limits.d/splunk.conf <<EOF
${SPLUNK_USER} soft nofile 64000
${SPLUNK_USER} hard nofile 64000
${SPLUNK_USER} soft nproc  16000
${SPLUNK_USER} hard nproc  16000
EOF

# -------------------- Lightweight monitor (with syslog alerts) --------------------
tee /usr/local/bin/ccdc_monitor.sh >/dev/null <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
LOG_DIR="/var/log/ccdc_monitoring"
mkdir -p "${LOG_DIR}"

# Allowed listeners: Splunk Web (8000), mgmt (8089), receiver (9997)
ALLOWED_PORTS=("tcp:8000" "tcp:8089" "tcp:9997")

while true; do
  TS="$(date +%Y%m%d_%H%M%S)"
  SNAP="${LOG_DIR}/status_${TS}.log"
  {
    echo "=== System Status ${TS} ==="
    echo "== Splunk service =="; systemctl is-active splunk && systemctl --no-pager status splunk || echo "SPLUNK NOT ACTIVE"; echo
    echo "== Listening sockets =="; ss -tulpen; echo
    echo "== Recent system messages =="; tail -n 100 /var/log/messages 2>/dev/null || true
  } > "$SNAP"

  # Splunk down?
  if ! systemctl is-active --quiet splunk; then
    logger -p daemon.crit -t CCDC "SPLUNK DOWN: service not active"
  fi

  # 8089 must be loopback-only
  if ss -ltnp | awk '$4 ~ /:8089$/ {print $4}' | grep -q -v '^127\.0\.0\.1:'; then
    logger -p authpriv.alert -t CCDC "SECURITY: splunkd (8089) is listening on non-loopback!"
  fi

  # Unexpected listeners (unless allowed)
  ALLOW_RE="$(printf '%s\n' "${ALLOWED_PORTS[@]}" | sed 's#^#^#;s#:#.*:#;s#$#$#' | paste -sd'|' -)"
  BAD_LISTEN="$(ss -ltnpH | awk '{print "tcp:"$4}' | grep -Ev '127\.0\.0\.1:' | grep -Ev "${ALLOW_RE:-^$}" || true)"
  if [[ -n "${BAD_LISTEN}" ]]; then
    logger -p authpriv.warning -t CCDC "UNEXPECTED LISTENERS: ${BAD_LISTEN}"
  fi

  # Recent AIDE differences reminder
  LAST_AIDE="$(ls -1t /var/log/aide/aide_summary_*.txt 2>/dev/null | head -1 || true)"
  if [[ -n "$LAST_AIDE" ]] && grep -qv "Changed files: 0" "$LAST_AIDE"; then
    logger -p authpriv.alert -t CCDC "AIDE: Integrity differences detected recently. See $LAST_AIDE"
  fi

  sleep 300
done
EOF
chmod +x /usr/local/bin/ccdc_monitor.sh

cat > /etc/systemd/system/ccdc-monitor.service <<'EOF'
[Unit]
Description=CCDC Monitoring Service
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/ccdc_monitor.sh
Restart=always

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable --now ccdc-monitor >/dev/null 2>&1 || true

# -------------------- Final status --------------------
say "DONE: 8000 (web) + 9997 (receiver) open to all; 8089 bound to localhost."
say "Backups: ${BACKUP_DIR}"
echo
echo "Quick verify:"
echo "  ss -ltnp | egrep ':${SPLUNK_WEB_PORT}|:${SPLUNK_MGMT_PORT}|:${SPLUNK_RECEIVE_PORT}'"
echo "  firewall-cmd --get-default-zone && firewall-cmd --list-all --zone=\$(firewall-cmd --get-default-zone)"
echo "  systemctl status splunk --no-pager"
